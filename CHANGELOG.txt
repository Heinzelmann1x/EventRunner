v1.4, Nov 28, 2018

-Trigger logic for EventScript rewritten (much cleaner!)
  Logic expressions in left-hand of rules for event triggers is now allowed
  Rule.eval("#foo & 55:isOn & 11:00..12:00 => log('Hurray')")
  In fact, expressions like this works
  Rule.eval("(#foo{val='a'} | #bar{val='a'}) & 55:isOn => log('val=%s',a)")
  So, open coded event expression in the left hand will be used as trigger (event handlers).
  
-There is a new function Util.printRule(rule) that will list the event handlers (triggers) of a rule
 Util.printRule(Rule.eval("(#foo{val='a'} | #bar{val='a'}) & 55:isOn => log('val=%s',a)"))
 ...will result in
 08:57:02:Wed Nov 28: -----------------------------------
 08:57:02:Wed Nov 28: Source:'(#foo{val='a'} | #bar{val='a'}) & 55:isOn => log('val=%s',a)'
 08:57:02:Wed Nov 28: Trigger({"type":"bar","val":"a"}) =>...
 08:57:02:Wed Nov 28: Trigger({"type":"property","deviceID":55,"propertyName":"value"}) =>...
 08:57:02:Wed Nov 28: Trigger({"type":"foo","val":"a"}) =>...
 08:57:02:Wed Nov 28: -----------------------------------
 ...and we can see that it creates trigger for the 'bar' and 'foo' event, and for the deviceID 55.
 
-Error handling cleaned up. Still many unclear error messages but the logic is there now to improve it
-Many small bugs fixed; local vars could not be set to 'false' etc.
------------------------------------------------------------------------------
v1.3, Nov 18, 2018

-Fixed error in central/access property introduced by "definition time trigger" below.

-(Fixed errors where trigger rules were not run at definition time.) REVERTED for now.

 E.g. Rule.eval("5:isOff => log('x')") would not trigger if 5 was already off when rule defined and only trigger the first time that 5 changed value. This was also true for the 'for' construct.
-More effective lookup of 'property' and 'global' triggers
-Built-in support for 'ping'
 {type=Event.PING} => Event.postRemote(sender,{type=Event.PONG})
 Event.PING == '%%PING%%'
 Event.PONG == '%%PONG%%'
-Better handling of HomeTable struct when running offline
 If _deviceTable is defined then fibaro:getGlobal(_deviceTable) results in _deviceTable..".data" is read in from a file in the working directory.
 This means that it is possible to have many device data files
-Support for Event.trueFor(time,event,action)
 Only works with with 'property' and 'global' events and require the 'value' field to have a constraint.
 Ex. Event.trueFor("+/00:10",{type='property',deviceID=8, value='$>0},
                    function(env) Log(LOG.LOG,"Device 8 have been on for 10min") end)
  This works because we can create a "negative" event pattern for these kind of events. 